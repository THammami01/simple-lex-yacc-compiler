Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> expression
Rule 1     expression -> NUMBER
Rule 2     expression -> expression OPADD expression
Rule 3     expression -> expression OPMUL expression

Terminals, with rules where they appear

NUMBER               : 1
OPADD                : 2
OPMUL                : 3
error                : 

Nonterminals, with rules where they appear

expression           : 2 2 3 3 0

Parsing method: LALR

state 0

    (0) S' -> . expression
    (1) expression -> . NUMBER
    (2) expression -> . expression OPADD expression
    (3) expression -> . expression OPMUL expression

    NUMBER          shift and go to state 2

    expression                     shift and go to state 1

state 1

    (0) S' -> expression .
    (2) expression -> expression . OPADD expression
    (3) expression -> expression . OPMUL expression

    OPADD           shift and go to state 3
    OPMUL           shift and go to state 4


state 2

    (1) expression -> NUMBER .

    OPADD           reduce using rule 1 (expression -> NUMBER .)
    OPMUL           reduce using rule 1 (expression -> NUMBER .)
    $end            reduce using rule 1 (expression -> NUMBER .)


state 3

    (2) expression -> expression OPADD . expression
    (1) expression -> . NUMBER
    (2) expression -> . expression OPADD expression
    (3) expression -> . expression OPMUL expression

    NUMBER          shift and go to state 2

    expression                     shift and go to state 5

state 4

    (3) expression -> expression OPMUL . expression
    (1) expression -> . NUMBER
    (2) expression -> . expression OPADD expression
    (3) expression -> . expression OPMUL expression

    NUMBER          shift and go to state 2

    expression                     shift and go to state 6

state 5

    (2) expression -> expression OPADD expression .
    (2) expression -> expression . OPADD expression
    (3) expression -> expression . OPMUL expression

    OPADD           reduce using rule 2 (expression -> expression OPADD expression .)
    OPMUL           reduce using rule 2 (expression -> expression OPADD expression .)
    $end            reduce using rule 2 (expression -> expression OPADD expression .)

  ! OPADD           [ shift and go to state 3 ]
  ! OPMUL           [ shift and go to state 4 ]


state 6

    (3) expression -> expression OPMUL expression .
    (2) expression -> expression . OPADD expression
    (3) expression -> expression . OPMUL expression

    OPMUL           reduce using rule 3 (expression -> expression OPMUL expression .)
    $end            reduce using rule 3 (expression -> expression OPMUL expression .)
    OPADD           shift and go to state 3

  ! OPADD           [ reduce using rule 3 (expression -> expression OPMUL expression .) ]
  ! OPMUL           [ shift and go to state 4 ]

